#### Constants ####

SERVICE_ACCOUNT_LABEL = "zzz-service-accounts"

#### External Functions ####

# Provides the Tilt resource name used by `create_impersonation_credentials` for
# creating the credentials file for the given email.
#
# You only need to use this if you need to refer to the created resource - e.g.
# if you need to add a `resource_deps` in your own Tiltfile that relies on the credentials
# resource completing first.
#
# Params:
#   impersonate_email = The service account email being impersonated.
#
# Returns:
#   The name of a Tilt resource.
def impersonation_resource_name(impersonate_email):
  return "impersonate:{}".format(impersonate_email)

# Provides the full path to the credentials file generated by `create_impersonation_credentials`.
#
# This is the same value returned by `create_impersonation_credentials`, so this is only needed
# if it's impractical to forward the return value to where you need it to be.
#
# Params:
#   impersonate_email = The service account email being impersonated.
#
# Returns:
#   The full path to the credentials JSON file.
def impersonation_credentials_file(impersonate_email):
  return "/tmp/soon_impersonate/{}".format(impersonate_email)

# Creates a new gcloud credentials file in a temporary location,
# which will allow applications to use your normal default credentials
# to impersonate a service account.
#
# The user's default credentials will need the `Service Account Token Creator` role
# attached to the target service account.
#
# You can set the `GOOGLE_APPLICATION_CREDENTIALS` environment variable to the resulting
# credentials file (the returned value), which will automatically be picked up by the GCP SDK.
#
#Â If you want to use the gcloud CLI directly with these credentials, then you need to set
# `CLOUDSDK_AUTH_CREDENTIAL_FILE_OVERRIDE` instead to the same value.
#
# Params:
#   impersonate_email = The service account email to setup impersonation for.
#
# Returns:
#   The full path to the credentials JSON file.
def create_impersonation_credentials(impersonate_email):
  original_creds = read_json(os.getenv("HOME")+"/.config/gcloud/application_default_credentials.json")
  impersonate_creds = {
    "delegates": [],
    "type": "impersonated_service_account",
    "source_credentials": original_creds | {
      "universe_domain": "googleapis.com"
    },

    "service_account_impersonation_url":
      "https://iamcredentials.googleapis.com/v1/projects/-/serviceAccounts/{}:generateAccessToken"
      .format(impersonate_email)
  }
  
  resource = impersonation_resource_name(impersonate_email)
  path = impersonation_credentials_file(impersonate_email)
  local_resource(
    resource,
    cmd=["bash", "-c", """
      mkdir -p /tmp/soon_impersonate
      echo $CREDS > '{path}'

      # --include-email only works with impersonated accounts, so we
      # can use it to check that we have permission to the service account.
      export CLOUDSDK_AUTH_CREDENTIAL_FILE_OVERRIDE='{path}'
      gcloud auth print-identity-token --include-email > /dev/null
    """.format(path=path)],
    env={
      "CREDS": encode_json(impersonate_creds) 
    },
    allow_parallel=True,
    auto_init=True,
    labels=[SERVICE_ACCOUNT_LABEL],
  )

  return path
